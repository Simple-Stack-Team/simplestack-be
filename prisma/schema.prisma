datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Organization {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  orgName             String    
  headquarterAdress   String
  employees           Employee[]
  createdAt           DateTime        @default(now())
  teamRoles           TeamRole[]
  departments         Department[]
  skills              SkillCategory[]
  orgSkills           Skill[]
  projects            Project[]
  employeeProject     EmployeeProject[]
  notifications       Notification[]
}

model TeamRole {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  organization        Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId      String          @db.ObjectId
  projectTeamRoles    ProjectTeamRole[]
}

model Employee {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  email               String          @unique
  password            String
  organization        Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId      String          @db.ObjectId
  roles               Role[]          @default([EMPLOYEE])
  createdAt           DateTime        @default(now())
  managerAt           Department?     @relation("ManagerDepartment")
  department          Department?     @relation(fields: [departmentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  departmentId        String?         @db.ObjectId
  createdSkills       Skill[]
  personalSkills      SkillAssignment[]
  projects            EmployeeProject[]
  assignmentProposal  AssignmentProposal[]
  deallocationProposal DeallocationProposal[]
  createdProjects     Project[]
  notifications       Notification[]
}

model Department {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  createdAt           DateTime        @default(now())
  organization        Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId      String          @db.ObjectId
  managerId           String?         @db.ObjectId @unique
  manager             Employee?       @relation("ManagerDepartment", fields: [managerId], references: [id], onDelete: SetNull)
  members             Employee[]      
  skills              Skill[]         @relation(fields: [skillIds], references: [id])
  skillIds            String[]        @db.ObjectId
  assignmentProposal  AssignmentProposal[]
  deallocationProposal DeallocationProposal[]
  notifications       Notification[]
}

model SkillCategory {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  skills              Skill[]
  organization        Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade) 
  organizationId      String          @db.ObjectId
}

model Skill {
  organization        Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade) 
  organizationId      String          @db.ObjectId
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  description         String
  category            SkillCategory   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId          String          @db.ObjectId
  author              Employee        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId            String          @db.ObjectId
  departments         Department[]    @relation(fields: [departmentIds], references: [id])
  departmentIds       String[]        @db.ObjectId
  SkillAssignments    SkillAssignment[]
}

model SkillAssignment {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  level               Int
  experience          String
  employee            Employee        @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId          String          @db.ObjectId
  skillId             String          @db.ObjectId
  skill               Skill           @relation(fields: [skillId], references: [id], onDelete: Cascade)
}

model Project {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  organization        Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade) 
  organizationId      String          @db.ObjectId
  name                String
  period              String
  startDate           DateTime
  deadlineDate        DateTime?
  status              String
  description         String
  technologyStack     String[]
  teamRoles           ProjectTeamRole[]
  members             EmployeeProject[]
  assignmentProposal  AssignmentProposal[]
  deallocationProposal DeallocationProposal[]
  authorId            String        @db.ObjectId
  author              Employee      @relation(fields: [authorId], references: [id])
}

model EmployeeProject {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  organization        Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade) 
  organizationId      String          @db.ObjectId
  project             Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId           String          @db.ObjectId
  employee            Employee        @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId          String          @db.ObjectId
  employeeRoles       String[]
  workHours           Int
  startWork           DateTime
  endWork             DateTime?
  deallocationProposal DeallocationProposal? @relation("DeallocEmployee")
}

model ProjectTeamRole {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  teamroleId          String          @db.ObjectId
  teamRole            TeamRole        @relation(fields: [teamroleId], references: [id])
  projectId           String          @db.ObjectId
  project             Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  nrOfMembers         Int
}

model AssignmentProposal {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  teamRoles           String[]
  projectId           String          @db.ObjectId
  project             Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  employee            Employee        @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId          String          @db.ObjectId
  workHours           Int
  comments            String
  departmentId        String          @db.ObjectId
  department          Department      @relation(fields: [departmentId], references: [id], onDelete: Cascade)
}

model  DeallocationProposal {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  projectId           String          @db.ObjectId
  project             Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  employee            Employee        @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId          String          @db.ObjectId
  reason              String
  departmentId        String          @db.ObjectId
  department          Department      @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  employeeProjectId   String          @db.ObjectId @unique
  employeeProject     EmployeeProject @relation("DeallocEmployee",fields: [employeeProjectId], references: [id], onDelete: Cascade)
}

model Notification{
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  description         String
  organization        Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade) 
  organizationId      String          @db.ObjectId
  department          Department      @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId        String          @db.ObjectId
  isRead              Boolean         @default(false)
  employee            Employee        @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId          String          @db.ObjectId
}

enum Role {
  EMPLOYEE
  PROJECT_MANAGER
  DEPARTMENT_MANAGER
  ORGANIZATION_ADMIN
}
