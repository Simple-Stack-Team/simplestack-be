datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Organization {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  orgName             String    
  headquarterAdress   String
  employees           Employee[]
  createdAt           DateTime        @default(now())
  teamRoles           TeamRole[]
  departments         Department[]
  skills              SkillCategory[]     
}

model TeamRole {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  organization        Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId      String          @db.ObjectId
}

model Employee {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  email               String          @unique
  password            String
  organization        Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId      String          @db.ObjectId
  roles               Role[]          @default([EMPLOYEE])
  createdAt           DateTime        @default(now())
  managerAt           Department?     @relation("ManagerDepartment")
  department          Department?     @relation(fields: [departmentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  departmentId        String?         @db.ObjectId
  createdSkills       Skill[]
  personalSkills      SkillAssignment[]
}

model Department {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  createdAt           DateTime        @default(now())
  organization        Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId      String          @db.ObjectId
  managerId           String?         @db.ObjectId @unique
  manager             Employee?       @relation("ManagerDepartment", fields: [managerId], references: [id], onDelete: SetNull)
  members             Employee[]      
  skills              Skill[]         @relation(fields: [skillIds], references: [id])
  skillIds            String[]        @db.ObjectId
}

model SkillCategory {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  skills              Skill[]
  organization        Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade) 
  organizationId      String          @db.ObjectId
}

model Skill {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  description         String
  category            SkillCategory   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId          String          @db.ObjectId
  author              Employee        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId            String          @db.ObjectId
  departments         Department[]    @relation(fields: [departmentIds], references: [id])
  departmentIds       String[]        @db.ObjectId
  SkillAssignments    SkillAssignment[]
}

model SkillAssignment {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  level               Int
  experience          String
  employee            Employee        @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId          String          @db.ObjectId
  skillId             String          @db.ObjectId
  skill               Skill           @relation(fields: [skillId], references: [id], onDelete: Cascade)
}

enum Role {
  EMPLOYEE
  PROJECT_MANAGER
  DEPARTMENT_MANAGER
  ORGANIZATION_ADMIN
}
